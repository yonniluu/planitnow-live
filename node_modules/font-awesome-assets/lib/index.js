'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iconsByUnicodeHex = exports.icons = exports.aliases = undefined;
exports.svg = svg;
exports.img = img;
exports.png = png;
exports.png2x = png2x;
exports.png3x = png3x;

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

var _svg2png = require('svg2png');

var _svg2png2 = _interopRequireDefault(_svg2png);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _svgfont2js = require('svgfont2js');

var _svgfont2js2 = _interopRequireDefault(_svgfont2js);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function applyAttributes($el, attrs) {
  // [ [ attr, val ], ... ]
  if (!_lodash2.default.isArray(attrs) || attrs.length === 0) return $el;
  var hasMissing = _lodash2.default.some(attrs, function (pair) {
    return !_lodash2.default.isArray(pair) || pair.length !== 2;
  });
  if (hasMissing) throw new Error('attribute pairs must be arrays with two keys [ attr, val ]');
  _lodash2.default.each(attrs, function (pair) {
    $el.attr(pair[0], pair[1]);
  });
  return $el;
}

// inspired by <https://github.com/riobard/font-awesome-svg/blob/master/extract.js>

function loadAliases(less) {

  var pairs = _lodash2.default.compact(_lodash2.default.map(less.split('\n'), function (line) {

    // line is `@fa-var-dropbox: "\f16b";`
    if (line.indexOf('@fa-var-') !== 0) return;

    // now it is `dropbox: "\f16b";`
    line = line.split('@fa-var-', 2)[1];

    // split the line by the `: ` delimiter
    line = line.split(': ');

    // now we have a line array that looks like:
    // [0] = `dropbox`
    // [1] = "\f16b";`

    // clean up the first key
    line[1] = line[1].split('"')[1].substring(1);

    return { name: line[0], unicode: line[1] };
  }));

  return _lodash2.default.zipObject(_lodash2.default.map(pairs, 'name'), _lodash2.default.map(pairs, 'unicode'));
}

var aliases = exports.aliases = loadAliases(_fs2.default.readFileSync(require.resolve('font-awesome/less/variables.less'), 'utf8'));

var icons = exports.icons = (0, _svgfont2js2.default)(_fs2.default.readFileSync(require.resolve('font-awesome/fonts/fontawesome-webfont.svg'), 'utf8'));

var iconsByUnicodeHex = exports.iconsByUnicodeHex = _lodash2.default.zipObject(_lodash2.default.map(icons, 'unicode_hex'), icons);

function svg(name, color, width, height, attrs) {

  // set defaults
  name = name || 'smile-o';
  color = color || '#000';
  width = (width || '100%').toString();
  height = (height || '100%').toString();

  // check variable types
  if (!_lodash2.default.isString(name)) throw new Error('fa.svg `name` must be a String');
  if (!_lodash2.default.isString(color)) throw new Error('fa.svg `color` must be a String');

  // convert name to lowercase
  name = name.toLowerCase();

  // remove "fa-" prefix from name if it exists
  if (name.indexOf('fa-') === 0) name = name.substring(3);

  // ensure that the font exists, otherwise throw an error
  if (!_lodash2.default.isString(aliases[name])) throw new Error('fa.svg name "' + name + '" must be a valid FontAwesome icon name');

  // get the icon svg information
  var icon = iconsByUnicodeHex[aliases[name]];

  // ensure that the font svg exists, otherwise throw an error
  if (!_lodash2.default.isObject(icon)) throw new Error('fa.svg name "' + name + '" was missing its font SVG value parsed');

  // return the svg
  var $svg = (0, _cheerio2.default)('<svg>', {
    xmlMode: true
  });
  $svg.attr('xmlns', 'http://www.w3.org/2000/svg');
  $svg.attr('width', width);
  $svg.attr('height', height);
  $svg.attr('viewBox', '0 0 ' + icon.width + ' ' + icon.height);
  $svg = applyAttributes($svg, attrs);
  $svg.append('<path fill="' + color + '" d="' + icon.path + '" />');
  return _cheerio2.default.html($svg);
}

function img(name, color, width, height, attrs) {
  var str = svg(name, color);
  var $img = (0, _cheerio2.default)('<img>');
  $img.attr('width', width);
  $img.attr('height', height);
  $img.attr('src', 'data:image/svg+xml;base64,' + new Buffer(str, 'binary').toString('base64'));
  $img = applyAttributes($img, attrs);
  return _cheerio2.default.html($img);
}

function png(name, color, width, height, attrs, size) {
  var str = svg(name, color);
  width = parseInt(width, 10) || 16;
  height = parseInt(height, 10) || 16;
  size = parseInt(size, 10) || 1;
  if (!_lodash2.default.isNumber(width)) throw new Error('fa.png width must be a number');
  if (!_lodash2.default.isNumber(height)) throw new Error('fa.png height must be a number');
  str = _svg2png2.default.sync(new Buffer(str, 'utf8'), {
    width: parseInt(width * size, 10),
    height: parseInt(height * size, 10)
  });
  var $img = (0, _cheerio2.default)('<img>');
  $img.attr('width', width);
  $img.attr('height', height);
  $img.attr('src', 'data:image/png;base64,' + str.toString('base64'));
  $img = applyAttributes($img, attrs);
  return _cheerio2.default.html($img);
}

function png2x(name, color, width, height, attrs) {
  return png(name, color, width, height, attrs, 2);
}

function png3x(name, color, width, height, attrs) {
  return png(name, color, width, height, attrs, 3);
}

exports.default = {
  aliases: aliases,
  icons: icons,
  iconsByUnicodeHex: iconsByUnicodeHex,
  img: img,
  svg: svg,
  png: png,
  png2x: png2x,
  png3x: png3x
};
//# sourceMappingURL=data:application/json;base64,